<?php

namespace Drupal\csv_importer {

  use Drupal;
  use Drupal\Core\Cache\CacheBackendInterface;
  use Drupal\Core\Database\Connection;
  use Symfony\Component\Yaml\Exception\ParseException;
  use Symfony\Component\Yaml\Yaml;

  /**
   * Gets the structure Yaml file used by the csv_importer module from cache.
   * 
   * @return array Yaml config file.
   */
  function getYmlFromCache() {
    /* @var $cache CacheBackendInterface */
    $cache = Drupal::cache();

    if ($valueFromCache = $cache->get('csv_importer_ymlFromCache')) {
      return $valueFromCache->data;
    }

    return refreshYmlFromCache();
  }

  /**
   * Refreshes the cache of the structure Yaml file used by the csv_importer module.
   * 
   * @return array Yaml config file.
   */
  function refreshYmlFromCache() {
    /* @var $cache CacheBackendInterface */
    $cache = Drupal::cache();

    /* @var $database Connection */
    $database = Drupal::database();

    try {
      // Collection of all YAML structure files locations to cache
      $ymlLocationsToCheck = [];

      // Default structure file of CSV Importer module
      $ymlLocationsToCheck['csv_importer'] = Drupal::config('csv_importer.csvimporterconfig')->get('yml_location');

      // Structure files from other dependent modules
      $results = $database
              ->select('csv_importer_structure_files_locations', 'loc')
              ->fields('loc', ['module_name', 'file_location'])
              ->execute()->fetchAll();

      foreach ($results as $r) {
        $ymlLocationsToCheck[$r->module_name] = $r->file_location;
      }

      // Collection of all YAML structure files to put in cache
      $ymlStructures = [];

      foreach ($ymlLocationsToCheck as $moduleName => $ymlLocation) {
        // $MODULE_PATH alias
        $ymlLocation = str_replace('$MODULE_PATH', drupal_get_path('module', $moduleName), $ymlLocation);

        // Parse YAML file!
        $structure = Yaml::parse(file_get_contents($ymlLocation));

        if ($structure == null) {
          // Yaml::parse(...) returns null if the file does not exist
          flushYmlCache();

          drupal_set_message(t('Failed to parse structure YAML file from this location: @ymlLocation . Please put the file at this location or change the file location.', ['@ymlLocation' => $ymlLocation]), 'warning');

          return null;
        }

        // The structure array is OK
        $ymlStructures[$moduleName] = $structure;
      }

      // Put full structure in cache
      $cache->set('csv_importer_ymlFromCache', $ymlStructures);

      drupal_set_message(t('CSV Importer: The structure YAML cache has been refreshed successfully.'));

      return $ymlStructures;
    }
    catch (ParseException $e) {
      flushYmlCache();

      drupal_set_message(t('Unable to parse the structure YAML file: @s', $e->getMessage()), 'error');

      return null;
    }
  }

  /**
   * Flushes the structure cache.
   */
  function flushYmlCache() {
    $cache = Drupal::cache();

    if ($cache->get('csv_importer_ymlFromCache')) {
      $cache->delete('csv_importer_ymlFromCache');
    }
  }

  /**
   * Checks if the structure is currently cached.
   * 
   * @return boolean TRUE if the structure is in the cache. FALSE otherwise.
   */
  function isYmlInCache() {
    $cache = Drupal::cache();

    if ($cache->get('csv_importer_ymlFromCache')) {
      return true;
    }

    return false;
  }

  /**
   * Adds a YAML structure file location from another module.
   * The cache is rebuilt upon this function's call.
   * 
   * @param string $moduleName The module name. A module can only register a single structure file.
   * @param string $location The YAML file location, relative to the base location of the module which holds it. Usually: $MODULE_PATH/structure.yml
   */
  function addStructureYmlLocation($moduleName, $location) {
    // Prevent non string values
    if (!is_string($moduleName) || !is_string($location)) {
      drupal_set_message(t('Couldn\'t register a structure YAML location. Non-string argument passed.'), 'error');

      return;
    }

    // Prevent empty values
    if (empty($moduleName) || empty($location)) {
      drupal_set_message(
          t('Couldn\'t register a structure YAML location. Module name: "@moduleName" Location: "@location".', 'error')
          , ['@moduleName' => $moduleName, '@location' => $location]
          , 'error'
      );

      return;
    }

    /* @var $database Connection */
    $database = Drupal::database();

    $database
        ->upsert('csv_importer_structure_files_locations')
        ->key('module_name')
        ->fields(['module_name', 'file_location'], [$moduleName, $location])
        ->execute();

    // Refresh the structure cache
    refreshYmlFromCache();
  }

  /**
   * Removes a YAML structure file.
   * The cache is rebuilt upon this function's call.
   * 
   * @param string $moduleName The name of the module which holds the structure file.
   */
  function removeStructureYmlLocation($moduleName) {
    // Prevent non string values
    if (!is_string($moduleName)) {
      drupal_set_message(t('Couldn\'t unregister a structure YAML location. Non-string argument passed.', 'error'));

      return;
    }

    // Prevent empty values
    if (empty($moduleName)) {
      drupal_set_message(
          t('Couldn\'t unregister a structure YAML location. Module name: "@moduleName" Location: "@location".', 'error')
          , ['@moduleName' => $moduleName, '@location' => $location]
          , 'error'
      );

      return;
    }

    /* @var $database Connection */
    $database = Drupal::database();

    $database
        ->delete('csv_importer_structure_files_locations')
        ->where('module_name = :module_name', [':module_name' => $moduleName])
        ->execute();

    // Refresh the structure cache
    refreshYmlFromCache();
  }

}